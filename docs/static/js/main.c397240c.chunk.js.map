{"version":3,"sources":["style.js","App.js","serviceWorker.js","index.js"],"names":["Continer","styled","div","ContinerTitle","Title","p","App","useState","dataUser","serDataUser","useEffect","fetch","then","results","json","data","console","log","className","src","alt","name","lastName","telephone","identification","profession","age","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sjBAEO,IAAMA,EAAWC,IAAOC,IAAV,KAKRC,EAAgBF,IAAOC,IAAV,KAIbE,EAAQH,IAAOI,EAAV,KCqEHC,MAxEf,WAAgB,IAAD,EACkBC,mBAAS,IAD3B,mBACNC,EADM,KACGC,EADH,KAUb,OARAC,qBAAU,WACRC,MAAM,6DACHC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GACJN,EAAYM,EAAKA,WAEpB,IACHC,QAAQC,IAAI,WAAWT,GAErB,yBAAKU,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAK,iGAAkGD,UAAU,WAAWE,IAAI,SACrI,2CAIF,kBAACpB,EAAD,KACE,kBAACG,EAAD,KACE,kBAACC,EAAD,eAGA,2BACGI,EAASa,OAGd,kBAAClB,EAAD,KACE,kBAACC,EAAD,iBAGA,2BACGI,EAASc,WAGd,kBAACnB,EAAD,KACE,kBAACC,EAAD,oBAGA,2BACGI,EAASe,YAGd,kBAACpB,EAAD,KACE,kBAACC,EAAD,0BAGA,2BACGI,EAASgB,iBAGd,kBAACrB,EAAD,KACE,kBAACC,EAAD,qBAGA,2BACGI,EAASiB,aAGd,kBAACtB,EAAD,KACE,kBAACC,EAAD,aAGA,2BACGI,EAASkB,SC5DFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.c397240c.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Continer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const ContinerTitle = styled.div`\n  margin: 2%;\n`;\n\nexport const Title = styled.p`\n  font-weight: bold;\n`;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { \n  Continer,\n  ContinerTitle,\n  Title\n} from './style';\n\nfunction App() {\n  const [dataUser,serDataUser] = useState('')\n  useEffect(() => {\n    fetch('https://us-central1-test-api-4bd02.cloudfunctions.net/api')\n      .then(results => results.json())\n      .then(data => {\n        serDataUser(data.data)\n      });\n  }, []);\n  console.log('dataUser',dataUser)\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={'https://www.poli.edu.co/sites/default/files/logos/logo-poli-politecnico-grancolombiano2018.png'} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Informacion\n        </p>\n      </header>\n      <Continer>\n        <ContinerTitle>\n          <Title>\n            Nombre\n          </Title>\n          <p>\n            {dataUser.name}\n          </p>\n        </ContinerTitle>\n        <ContinerTitle>\n          <Title>\n            Apellido\n          </Title>\n          <p>\n            {dataUser.lastName}\n          </p>\n        </ContinerTitle>\n        <ContinerTitle>\n          <Title>\n            Teléfono\n          </Title>\n          <p>\n            {dataUser.telephone}\n          </p>\n        </ContinerTitle>\n        <ContinerTitle>\n          <Title>\n            Identificación\n          </Title>\n          <p>\n            {dataUser.identification}\n          </p>\n        </ContinerTitle>\n        <ContinerTitle>\n          <Title>\n            Profesión\n          </Title>\n          <p>\n            {dataUser.profession}\n          </p>\n        </ContinerTitle>\n        <ContinerTitle>\n          <Title>\n            Edad\n          </Title>\n          <p>\n            {dataUser.age}\n          </p>\n        </ContinerTitle>\n      </Continer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}